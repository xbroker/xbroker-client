#!/usr/bin/env node

'use strict';

var xbrokerBroker = require('../dist'),
    colors     = require('colors/safe'),
    fs         = require('fs'),
    os         = require('os'),
    portfinder = require('portfinder'),
    argv       = require('optimist').argv;

if (argv.h || argv.help) {
  console.log([
    'usage: xbroker [options]',
    '',
    'options:',
    '  -f --file    read the Xbroker configuration file',
    '  -s --silent  suppress log messages from output',
    '  -U --utc     use UTC time format in log messages',
    '',
    '  -h --help    print this list and exit',
    '',
    'If the configuration file is not specified,',
    'then the default config with redis will be applied',
    'and the following options can be used:',
    '',
    '  -p --port    web-socket server port [3500]',
    '  -a --auth    redis authorization string',
    '  -b --batchMs batch building interval in ms [100]',
    '  -d --debug   print debug messages',
    '  -v --verbose print more detailed messages'
  ].join('\n'));
  process.exit();
}

var file = argv.f || argv.file,
    port = argv.p || argv.port,
    auth = argv.a || argv.auth,
    batchMs = argv.b || argv.batchMs || 100,
    debug = argv.d || argv.debug || false,
    verbose = argv.v || argv.verbose || false,
    logger;

if (!argv.s && !argv.silent) {
  logger = {
    info: console.log,
    request: function (message, error) {
      var date = utc ? new Date().toUTCString() : new Date();
      if (error) {
        logger.info(
          '[%s] "%s %s" Error (%s): "%s"',
          date, colors.red(req.method), colors.red(req.url),
          colors.red(error.status.toString()), colors.red(error.message)
        );
      }
      else {
        logger.info(
          '[%s] "%s"',
          date, message
        );
      }
    }
  };
}
else if (colors) {
  logger = {
    info: function () {},
    request: function () {}
  };
}

if (!port) {
  portfinder.basePort = 3500;
  portfinder.getPort(function (err, port) {
    if (err) { throw err; }
    listen(port);
  });
}
else {
  listen(port);
}

function listen(port) {
  var options = {
    broker: {
      type: 'broker',
      debug: debug,
      verbose: verbose,
    },
    socket: {
      type: 'socket',
      debug: debug,
      verbose: verbose,
      port: port,
      batchIntervalMs: batchMs,
      defaultAgent: 'redis',
    },
    redis: {
      type: 'redis',
      debug: debug,
      verbose: verbose,
      port: 6379,
      host: 'localhost',
      auth: auth,
    },
  };

  if(file) {
    var content = fs.readFileSync(file);
    options = JSON.parse(content);
  }

  var server = xbrokerBroker.createServer(options);

  logger.info([colors.yellow('Starting up X-Broker Server, serving port '),
    colors.cyan(options.socket.port)].join(''));

  logger.info('Hit CTRL-C to stop the X-Broker Server');
}

if (process.platform === 'win32') {
  require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
  }).on('SIGINT', function () {
    process.emit('SIGINT');
  });
}

process.on('SIGINT', function () {
  logger.info(colors.red('X-Broker Server stopped.'));
  process.exit();
});

process.on('SIGTERM', function () {
  logger.info(colors.red('X-Broker Server stopped.'));
  process.exit();
});
